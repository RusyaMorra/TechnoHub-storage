                                                  Содержание:

                                                                Назначение протокола
                                                                Общая Структура
                                                                Общие понятия
                                                                Строка Статус
                                                                Метод
                                                                GET
                                                                HEAD
                                                                POST
                                                                PUT
                                                                DELETE
                                                                LINK
                                                                UNLINK
                                                                Поля Заголовок-Запроса
                                                                From
                                                                If-Modified-Since
                                                                User-Agent
                                                                Структура ответа
                                                                Строка Статус
                                                                Статус-Код и пояснение к нему
                                                                Поля Заголовок-Ответа
                                                                Общие Понятия
                                                                Поля Заголовок-Содержания
                                                                Allow
                                                                Content-Length
                                                                Content-Type
                                                                Last-Modified
                                                                Тело сообщения







Назначение протокола
HyperText Transfer Protocol (HTTP) — это протокол высокого уровня (а именно, уровня приложений), обеспечивающий необходимую скорость 
передачи данных, требующуюся для распределенных информационных систем гипермедиа. HTTP используется проектом World Wide Web с 1990 года.

Практические информационные системы требуют большего, чем примитивный поиск, модификация и аннотация данных. HTTP/1.0 предоставляет открытое
 множество методов, которые могут быть использованы для указания целей запроса. Они построены на дисциплине ссылок, где для указания ресурса,
  к которому должен быть применен данный метод, используется Универсальный Идентификатор Ресурсов (Universal Resource Identifier — URI),
   в виде местонахождения (URL) или имени (URN). Формат сообщений сходен с форматом Internet Mail или Multipurpose Internet Mail Extensions 
   (MIME-Многоцелевое Расширение Почты Internet).

HTTP/1.0 используется также для коммуникаций между различными пользовательскими просмотрщиками и шлюзами, дающими гипермедиа доступ 
к существующим Internet протоколам, таким как SMTP, NNTP, FTP, Gopher и WAIS. HTTP/1.0 разработан, чтобы позволять таким шлюзам через 
proxy серверы, без какой-либо потери передавать данные с помощью упомянутых протоколов более ранних версий.





_______________________________________________

Общая Структура
HTTP основывается на парадигме запросов/ответов. Запрашивающая программа (обычно она называется клиент) устанавливает связь
 с обслуживающей программой-получателем (обычно называется сервер) и посылает запрос серверу в следующей форме: метод запроса, 
 URI, версия протокола, за которой следует MIME-подобное сообщение, содержащее управляющую информацию запроса, информацию о клиенте и,
  может быть, тело сообщения. Сервер отвечает сообщением, содержащим строку статуса (включая версию протокола и код статуса — успех или ошибка),
   за которой следует MIME-подобное сообщение, включающее в себя информацию о сервере, метаинформацию о содержании ответа, и, вероятно, само тело ответа. 
   Следует отметить, что одна программа может быть одновременно и клиентом и сервером. Использование этих терминов в данном тексте относится только
    к роли, выполняемой программой в течение данного конкретного сеанса связи, а не к общим функциям программы.

В Internet коммуникации обычно основываются на TCP/IP протоколах. Для WWW номер порта по умолчанию — TCP 80, но также могут быть
 использованы и другие номера портов — это не исключает возможности использовать HTTP в качестве протокола верхнего уровня.

Для большинства приложений сеанс связи открывается клиентом для каждого запроса и закрывается сервером после окончания ответа на запрос. 
Тем не менее, это не является особенностью протокола. И клиент, и сервер должны иметь возможность закрывать сеанс связи, например,
 в результате какого-нибудь действия пользователя. В любом случае, разрыв связи, инициированный любой стороной, прерывает текущий запрос, 
 независимо от его статуса.


_____________________________________________________


Общие понятия
Запрос — это сообщение, посылаемое клиентом серверу.
Первая строка этого сообщения включает в себя метод, который должен быть применен к запрашиваемому ресурсу,
 идентификатор ресурса и используемую версию протокола. Для совместимости с протоколом HTTP/0.9, существует два формата HTTP запроса:

Запрос = Простой-Запрос | Полный-Запрос
 Простой-Запрос = "GET" SP Запрашиваемый-URI CRLF
 Полный-Запрос = Строка-Статус
                *(Общий-Заголовок | Заголовок-Запроса | Заголовок-Содержания ) CRLF
                [ Содержание-Запроса ]
Если HTTP/1.0 сервер получает Простой-Запрос, он должен отвечать Простым-Ответом HTTP/0.9. HTTP/1.0 клиент, 
способный обрабатывать Полный-Ответ, никогда не должен посылать Простой-Запрос.


____________________________________________________



Строка Статус
Строка Статус начинается со строки с названием метода, за которым следует URI-Запроса и использующаяся версия протокола.
 Строка Статус заканчивается символами CRLF. Элементы строки разделяются пробелами (SP). В Строке Статус не допускаются 
 символы LF и CR, за исключением заключающей последовательности CRLF.

Строка-Статус = Метод SP URI-Запроса SP Версия-HTTP CRLF
Следует отметить, что отличие Строки Статус Полного-Запроса от Строки Статус Простого- Запроса заключается в присутствии 
поля Версия-HTTP.




____________________________________________________






Метод
В поле Метод указывается метод, который должен быть применен к ресурсу, идентифицируемому URI-Запроса. 
Названия методов чувствительны к регистру. Существующий список методов может быть расширен.

Метод = "GET" | "HEAD" | "PUT" | "POST" | "DELETE" | "LINK" | "UNLINK" 
| дополнительный-метод
Список методов, допускаемых отдельным ресурсом, может быть указан в поле Заголовок-Содержание «Баллов». 
Тем не менее, клиент всегда оповещается сервером через код статуса ответа, допускается ли применение данного
 метода для указанного ресурса, так как допустимость применения различных методов может динамически изменяться.
  Если данный метод известен серверу, но не допускается для указанного ресурса, сервер должен вернуть код статуса 
  «405 Method Not Allowed», и код статуса «501 Not Implemented», если метод не известен или не поддерживается данным сервером. 
  Общие методы HTTP/1.0 описываются ниже.
____________________________________________________

GET
Метод GET служит для получения любой информации, идентифицированной URI-Запроса. Если URI- Запроса ссылается на процесс,
 выдающий данные, в качестве ответа будут выступать данные, сгенерированные данным процессом, а не код самого процесса
  (если только это не является выходными данными процесса).

Метод GET изменяется на «условный GET», если сообщение запроса включает в себя поле заголовка «If-Modified-Since».
 В ответ на условный GET, тело запрашиваемого ресурса передается только, если он изменялся после даты, указанной в
  заголовке «If-Modified-Since». Алгоритм определения этого включает в себя следующие случаи:

Если код статуса ответа на запрос будет отличаться от «200 OK», или дата, указанная в поле заголовка «If-Modified-Since»
 некорректна, ответ будет идентичен ответу на обычный запрос GET.
Если после указанной даты ресурс изменялся, ответ будет также идентичен ответу на обычный запрос GET.
Если ресурс не изменялся после указанной даты, сервер вернет код статуса «304 Not Modified».
Использование метода условный GET направлено на разгрузку сети, так как он позволяет не передавать по сети избыточную информацию.



____________________________________________________


HEAD
Метод HEAD аналогичен методу GET, за исключением того, что в ответе сервер не возвращает Тело- Ответа. 
Метаинформация, содержащаяся в HTTP заголовках ответа на запрос HEAD, должна быть идентична информации HTTP 
заголовков ответа на запрос GET. Данный метод может использоваться для получения метаинформации о ресурсе без передачи по 
сети самого ресурса. Метод «Условный HEAD», аналогичный условному GET, не определен.






____________________________________________________



POST
Метод POST используется для запроса сервера, чтобы тот принял информацию, включенную в запрос, как субординантную для ресурса,
 указанного в Строке Статус в поле URI-Запроса. Метод POST был разработан, чтобы была возможность использовать один общий метод для следующих функций:

Аннотация существующих ресурсов
Добавление сообщений в группы новостей, почтовые списки или подобные группы статей
Доставка блоков данных процессам, обрабатывающим данные
Расширение баз данных через операцию добавления
Реальная функция, выполняемая методом POST, определяется сервером и обычно зависит от URI- Запроса. Добавляемая информация 
рассматривается как субординатная указанному URI в том же смысле, как файл субординатен каталогу, в котором он находится, 
новая статья субординатна группе новостей, в которую она добавляется, запись субординатна базе данных.

Клиент может предложить URI для идентификации нового ресурса, включив в запрос заголовок «URI». Тем не менее, сервер должен 
рассматривать этот URI только как совет и может сохранить тело запроса под другим URI или вообще без него.

Если в результате обработки запроса POST был создан новый ресурс, ответ должен иметь код статуса, равный «201 Created»,
 и содержать URI нового ресурса.







____________________________________________________



PUT
Метод PUT запрашивает сервер о сохранении Тело-Запроса под URI, равным URI-Запроса. Если URI-Запроса ссылается на уже существующий ресурс,
 Тело-Запроса должно рассматриваться как модифицированная версия данного ресурса. Если ресурс, на который ссылается URI-Запроса не существует,
  и данный URI может рассматриваться как описание для нового ресурса, сервер может создать ресурс с данным URI. Если был создан новый ресурс, 
  сервер должен информировать направившего запрос клиента через ответ с кодом статуса «201 Created». Если существующий ресурс был модифицирован,
   должен быть послан ответ «200 OK», для информирования клиента об успешном завершении операции. Если ресурс с указанным URI не может быть 
   создан или модифицирован, должно быть послано соответствующее сообщение об ошибке.

Фундаментальное различие между методами POST и PUT заключается в различном значении поля URI-Запроса. Для метода POST данный URI указывает ресурс,
 который будет управлять информацией, содержащейся в теле запроса, как неким придатком. Ресурс может быть обрабатывающим данные процессом,
  шлюзом в какой нибудь другой протокол, или отдельным ресурсом, допускающим аннотации. В противоположность этому, URI для запроса PUT
   идентифицирует информацию, содержащуюся в Содержание-Запроса. Использующий запрос PUT точно знает какой URI он собирается использовать,
    и получатель запроса не должен пытаться применить этот запрос к какому-нибудь другому ресурсу.





____________________________________________________

DELETE
Метод DELETE используется для удаления ресурсов, идентифицированных с помощью URI-Запроса.
 Результаты работы данного метода на сервере могут быть изменены с помощью человеческого вмешательства 
 (или каким-нибудь другим способом). В принципе, клиент никогда не может быть уверен, что операция удаления была выполнена,
  даже если код статуса, переданный сервером, информирует об успешном выполнении действия. Тем не менее, сервер не должен информировать
   об успехе до тех пор, пока на момент ответа он не будет собираться стереть данный ресурс или переместить его в некоторую недостижимую область.



____________________________________________________


LINK
Метод LINK устанавливает взаимосвязи между существующим ресурсом, указанным в URI-Запроса, 
и другими существующими ресурсами. Отличие метода LINK от остальных методов, допускающих установление ссылок между документами,
 заключается в том, что метод LINK не позволяет передавать в запросе Тело-Запроса, и в том, что в результате работы данного метода не создаются новые ресурсы.





____________________________________________________
UNLINK
Метод UNLINK удаляет одну или более ссылочных взаимосвязей для ресурса, указанного в URI- Запроса. 
Эти взаимосвязи могут быть установлены с помощью метода LINK или какого-нибудь другого метода,
 поддерживающего заголовок «Link». Удаление ссылки на ресурс не означает, что ресурс прекращает существование или становится недоступным для будущих ссылок.




____________________________________________________

Поля Заголовок-Запроса
Поля Заголовок-Запроса позволяют клиенту передавать серверу дополнительную информацию о запросе и о самом клиенте.

Заголовок-Запроса = Accept | Accept-Charset | Accept-Encoding | 
                     Accept-Language | Authorization | From | 
                     If-Modified-Since | 
                     Pragma | Referer | User-Agent | extension-header
Кроме того через механизм расширения могут быть определены дополнительные заголовки; приложения,
которые их не распознают, должны трактовать эти заголовки, как Заголовок-Содержание.

Ниже будут рассмотрены некоторые поля заголовка запроса.






____________________________________________________

From
В случае присутствия поля From, оно должно содержать полный E-mail адрес пользователя,
 который управляет программой-агентом, осуществляющей запросы. Этот адрес должен быть задан в формате, 
 определенном в RFC 822. Формат данного поля следующий: From = «From» «:» спецификация адреса. Например:

From: webmaster@WWW.org
Данное поле может быть использовано для функций захода в систему, а также для идентификации источника 
некорректных или нежелательных запросов. Оно не должно использоваться, как несекретная форма разграничения прав доступа.
 Интерпретация этого поля состоит в том, что обрабатываемый запрос производится от имени данного пользователя, который 
 принимает ответственность за применяемый метод. В частности, агенты-роботы должны использовать этот заголовок для того,
  чтобы можно было связаться с тем человеком, который отвечает за работу робота, в случае возникновения проблем. Почтовый Internet адрес,
   указывающийся в этом поле, не обязан соответствовать адресу того хоста, с которого был послан данный запрос. По возможности,
    адрес должен быть доступным Internet адресом вне зависимости от того, является ли он в действительности Internet E-mail адресом 
    или Internet E-mail представлением адреса других почтовых систем.

Замечание: Клиент не должен использовать поле заголовка From без позволения пользователя, так как это может

 войти в конфликт с его частными интересами или с местной, используемой им, системой безопасности.
  Настоятельно рекомендуется предоставление пользователю возможности запретить, разрешить или модифицировать это поле в любой момент перед запросом.





____________________________________________________

If-Modified-Since
Поле заголовка If-Modified-Since используется с методом GET для того, чтобы сделать
 его условным: если запрашиваемый ресурс не изменялся во времени, указанного в этом поле, 
 копия этого ресурса не будет возвращена сервером; вместо этого, будет возвращен ответ «304 Not Modified» без Тела- Ответа.

If-Modified-Since = "If-Modified-Since" ":" HTTP-дата
Пример использования заголовка:

If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT
Целью этой особенности является предоставление возможности эффективного обновления информации
 локальных кэшей с минимумом передаваемой информации. Тот же результат может быть достигнут применением
  метода HEAD с последующим использованием GET, если сервер указал, что содержимое документа изменилось.





____________________________________________________
User-Agent
Поле заголовка User-Agent содержит информацию о пользовательском агенте,
 пославшем запрос. Данное поле используется для статистики, прослеживания ошибок протокола,
  и автоматического распознавания пользовательских агентов. Хотя это не обязательно, пользовательские
   агенты должны всегда включать это поле в свои запросы. Поле может содержать несколько строк, представляющих 
   собой название программного продукта, необязательную косую черту с указанием версии продукта, а также другие
    программные продукты, составляющие важную часть пользовательского агента. По соглашению, продукты указываются
     в списке в порядке убывания их значимости для идентификации приложения.

User-Agent = "User-Agent" ":" 1*( продукт ) 
 продукт = строка ["/" версия-продукта]
 версия-продукта = строка
Пример:

User-Agent: CERN-LineMode/2.15 libwww/2.17b3
Строка, описывающая название продукта, должна быть короткой и давать информацию по существу — использование данного 
заголовка для рекламирования какой-либо другой, не относящейся к делу, информации не допускается и рассматривается,
 как не соответствующее протоколу. Хотя в поле версии продукта может присутствовать любая строка, данная строка должна
  использоваться только для указания версии продукта. Поле User-Agent может включать в себя дополнительную информацию 
  в комментариях, которые не являются частью его значения.









____________________________________________________


Структура ответа
После получения и интерпретации запроса, сервер посылает ответ в соответствии со следующей формой:

Ответ = Простой-Ответ | Полный-Ответ
 Простой-Ответ = [ Содержание-Ответа ]
 Полный-Ответ = Строка-Статус
                *( Общий-Заголовок | Заголовок-Ответа | Заголовок-Содержания) CRLF
                [ Содержание-Ответа ]
Простой-Ответ должен посылаться только в ответ на HTTP/0.9 Простой-Запрос, или в том случае, 
если сервер поддерживает только ограниченный HTTP/0.9 протокол. Если клиент посылает HTTP/1.0 Полный-Запрос и получает ответ,
 который не начинается со Строки-Статус, он должен предполагать, что ответ сервера представляет собой Простой-Ответ, 
 и обрабатывать его в соответствии с этим. Следует заметить, что Простой-Ответ состоит только из запрашиваемой информации (без заголовков)
  и поток данных прекращается в тот момент, когда сервер закрывает сеанс связи.









____________________________________________________

Строка Статус
Первая строка Полного-Запроса является Строкой-Статус, состоящей из версии протокола,
 за которой следует цифровой код статуса и ассоциированное с ним текстовое предложение. 
 Все элементы Строки-Статус разделены пробелами. Не разрешены символы CR и LF, за исключением завершающей последовательности CRLF.

Строка-Статус=Версия-HTTP SP Статус-Код SP Фраза-Об'яснение.
Так как Строка-Статус всегда начинается с версии протокола «HTTP/» 1*ЦИФРА «.» 1*ЦИФРА (например HTTP/1.0),
 существование этого выражения рассматривается как основное для определения того, является ли ответ Простым-Ответом,
  или Полным-Ответом. Хотя формат Простого-Ответа не исключает появления подобной строки (что привело бы к неправильной 
  интерпретации сообщения ответа и принятию его за Полный-Ответ), вероятность такого появления близка к нулю.














____________________________________________________






Статус-Код и пояснение к нему
Элемент Статус-Код представляет собой 3-х цифровой целый код, идентифицирующий результат
 попытки интерпретации и удовлетворения запроса. Фраза-Об’яснение, следующая за ним, предназначена
  для краткого текстового описания Статус-Кода. Статус-Код нацелен на то, чтобы его использовала машина,
   а Фраза-Об’яснение предназначена для человека. Клиент не обязан исследовать и выводить на экран Фразу-Об’яснение.

Первая цифра Статус-Кода предназначена для определения класса ответа. Последние две цифры не выполняют 
никакой категоризирующей роли. Существует 5 значений для первой цифры:

1xx: Информационный — Не используется, но зарезервирован для использования в будущем
2xх: Успех — Запрос был полностью получен, понят, и принят к обработке.
3xx: Перенаправление — Клиенту следует предпринять дальнейшие действия для успешного выполнения запроса.
 Необходимое дополнительное действие иногда может быть выполнено клиентом без взаимодействия с пользователем,
  но настоятельно рекомендуется, чтобы это имело место только в тех случаях, когда метод, использующийся в запросе безразличен (GET или HEAD).
4xx: Ошибка клиента — Запрос, содержащий неправильные синтаксические конструкции, не может быть успешно 
выполнен. Класс 4xx предназначен для описания тех случаев, когда ошибка была допущена со стороны клиента.
 Если клиент еще не завершил запрос, когда он получил ответ с Статус-Кодом- 4xx, он должен немедленно
  прекратить передачу данных серверу. Данный тип Статус-Кодов применим для любых методов, употребляющихся в запросе.
5xx: Ошибка Сервера — Сервер не смог дать ответ на корректно поставленный запрос. В этих случаях
сервер либо знает, что он допустил ошибку, либо не способен обработать запрос. За исключением ответов на запросы HEAD,
 сервер посылает описание ошибочной ситуации и то, является ли это состояние временным или постоянным, в Содержание-Ответа.
  Данный тип Статус-Кодов применим для любых методов, употребляющихся в запросе.
Отдельные значения Статус-Кодов и соответствующие им Фразы-Об’яснения приведены ниже. Данные Фразы-Об’яснения только
 рекомендуются — они могут быть замещены любыми другими фразами, сохраняющими смысл и допускающимися протоколом.

Статус-Код = "200" ; OK |
"201" ; Created |
"202" ; Accepted |
"203" ; Provisional Information |
"204" ; No Content |
"300" ; Multiple Choices |
"301" ; Moved Permanently |
"302" ; Moved Temporarily |
"303" ; Method |
"304" ; Not Modified |
"400" ; Bad Request |
"401" ; Unauthorized |
"402" ; Payment Required |
"403" ; Forbidden |
"404" ; Not Found |
"405" ; Method Not Allowed |
"406" ; None Acceptable |
"407" ; Proxy Authentication Required |
"408" ; Request Timeout |
"409" ; Conflict |
"410" ; Gone |
"500" ; Internal Server Error |
"501" ; Not Implemented |
"502" ; Bad Gateway |
"503" ; Service Unavailable |
"504" ; Gateway Timeout |
Код-Рассширения
Код-Расширения = 3ЦИФРА
Фраза-Об'яснение = строка *( SP строка )
От HTTP приложений не требуется понимание всех Статус-Кодов, хотя такое понимание, очевидно, желательно. Тем не менее, от приложений
 требуется способность распознавания классов Статус-Кодов (идентифицирующихся первой цифрой) и отношение ко всем Статус-Кодам статуса ответа,
  как если бы они были эквивалентны Статус-Коду x00.









____________________________________________________


Поля Заголовок-Ответа
Поля заголовка ответа позволяют серверу передать дополнительную информацию об ответе, 
которая не может быть внесена в Строку-Статус. Эти поля заголовков не предназначены для 
передачи информации о содержании ответа, передаваемого в ответ на запрос, но там может быть информация собственно о сервере.

Заголовок-Ответа= Public | Retry-After | Server | WWW-Authenticate | extension-header
Хотя дополнительные поля заголовка ответа могут быть реализованы через механизм расширения,
 приложения, которые не распознают эти поля, должны обрабатывать их как поля Заголовок-Содержание. 
 Полное описание этих полей можно получить в спецификации протокола HTTP в CERN.










____________________________________________________

Общие Понятия
Полный-Запрос и Полный-Ответ может использоваться для передачи некоторой информации в отдельных запросах и ответах.
 Этой информацией является Содержание-Запроса или Содержание-Ответа соответственно, а также Заголовок-Содержания.








____________________________________________________






Поля Заголовок-Содержания
Поля Заголовок-Содержания содержат необязательную метаинформацию о Содержании-Запроса
 или Содержании-Ответа соответственно. Если тело соответствующего сообщения (запроса или ответа) 
 не присутствует, то Заголовок-Содержания содержит информацию о запрашиваемом ресурсе.

Заголовок-Содержания = Allow |
                        Content-Encoding | Content-Language | Content-Length |
                        Content-Transfer-Encoding | Content-Type |Derived-From |
                        Expires | Last-Modified |Link |
                        Location | Title | URI-header | Version | Заголовок-Расширения
 Заголовок-Расширения = HTTP-заголовок
Некоторые из полей заголовка содержания описаны ниже.









____________________________________________________
Allow
Поле заголовка Allow представляет собой список методов, которые поддерживает ресурс, 
идентифицированный URI-Запроса. Назначение этого поля — точное информирование получателя о допустимых методах,
 ассоциированных с ресурсом; это поле должно присутствовать в ответе со статус кодом «405 Method Not Allowed».

Allow = "Allow" ":" 1#метод
Пример использования:

Allow: GET, HEAD, PUT
Конечно, клиент может попробовать использовать другие методы. Однако, рекомендуется следовать тем методам, 

которые указаны в данном поле. У этого поля нет значения по умолчанию; если оно оставлено неопределенным,
 множество разрешенных методов определяется сервером в момент каждого запроса.





____________________________________________________



Content-Length
Поле Content-Length указывает размер тела сообщения, посланного сервером в ответ на запрос или,
 в случае запроса HEAD, размер тела сообщения, которое было бы послано в ответ на запрос GET.

Content-Length = "Content-Length" ":" 1*ЦИФРА
Например:

Content-Length: 3495
Хотя это не обязательно, но все же приложениям настоятельно рекомендуется использовать это поле для 
анализа размеров передаваемого сообщения, независимо от типа содержащейся в нем информации.
 Для поля Content-Length допустимым является любое целочисленное значение больше нуля.






____________________________________________________





Content-Type
Поле заголовка Content-Type идентифицирует тип информации в теле сообщения, которая посылается получающей стороне или,
 в случае метода HEAD, тип информации (среды), который был бы послан, если использовался метод GET.

Content-Type = "Content-Type" ":" тип-среды
Типы сред определены отдельно.
Пример:

Content-Type: text/html; charset=ISO-8859-4
Поле Content-Type не имеет значения по умолчанию.

____________________________________________________











Last-Modified
Поле заголовка содержит дату и время, в которое, по мнению отправляющей стороны,
 ресурс был последний раз модифицирован. Семантика данного поля определена в терминах, описывающих, 
 как получатель должен его интерпретировать: если получатель имеет копию ресурса, которая старше, 
 чем передаваемая в поле Last-Modified дата, то копия должна считаться устаревшей.

Last-Modified = "Last-Modified" ":" HTTP-дата
Пример использования:

Last-Modified: Tue, 15 Nov 1994 12:45:26 GMT
Точное значение этого поля заголовка зависит от реализации отправляющей стороны и сути самого ресурса.
 Для файлов, это может быть просто его время последней модификации. Для шлюзов к базам данных,
  это может быть время последнего обновления данных в базе. В любом случае, получатель должен беспокоиться лишь 
  о результате — о том, что находится в данном поле, — и не беспокоиться о том, как результат был получен.

____________________________________________________







Тело сообщения
Под телом сообщения понимается Содержание-Запроса или Содержание-Ответа соответственно. 
Тело сообщения, если оно присутствует, посылается в HTTP/1.0 запросе или ответе в формате и кодировке, 
определяемыми полями Заголовок-Содержания.

Тело-Сообщения = *OCTET (где OCTET это любой 8-битный символ)
Тело сообщения включается в запрос, только если метод запроса подразумевает его наличие.
 Для спецификации HTTP/1.0 такими методами являются POST и PUT. В общем, на присутствие тела 
 сообщения указывает присутствие таких полей заголовка содержания, как Content-Length и/или Content- Transfer-Encoding, в передаваемом запросе.

Что касается сообщений-ответов, наличие тела сообщения в ответе зависит от метода, который был использован в запросе,
 и Статус-Кода. Все ответы на запросы HEAD не должны содержать тело сообщения, хотя наличие некоторых полей заголовка 
 сообщения может указывать на возможное присутствие такового. Соответственно, ответы «204 No Content», «304 Not Modified», 
 и «406 None Acceptable» также не должны включать в себя тело сообщения.