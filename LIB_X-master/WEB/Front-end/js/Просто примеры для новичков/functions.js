// 1 Функции
// Function Declaration
// function greet(name) {
//   console.log('Привет - ', name)
// }

// Function Expression
// const greet2 = function greet2(name) {
//   console.log('Привет 2 - ', name)
// }

// greet('Лена')
// greet2('Лена')

// console.log(typeof greet)
// console.dir(greet)

// 2 Анонимные функции
// let counter = 0
// const interval = setInterval(function() {
//   if (counter === 5) {
//     clearInterval(interval) // clearTimeout
//   } else {
//     console.log(++counter)
//   }
// }, 1000)

// 3 Стрелочные функции
function greet() {
    console.log('Привет - ')
  }
  
  const arrow = (name, age) => {
    console.log('Привет - ', name, age)
  }
  
  const arrow2 = name => console.log('Привет - ', name)
  
  // arrow2('Vladilen')
  
  const pow2 = num => num ** 2
  
  // console.log(pow2(5))
  
  // 4 Параметры по умолчанию
  const sum = (a = 40, b = a * 2) => a + b
  
  // console.log(sum(41, 4))
  // console.log(sum())
  
  function sumAll(...all) {
    let result = 0
    for (let num of all) {
      result += num
    }
    return result
  }
  
  const res = sumAll(1, 2, 3, 4, 5)
  // console.log(res)
  
  // 5 Замыкания
  function createMember(name) {
    return function(lastName) {
      console.log(name + lastName)
    }
  }
  
  const logWithLastName = createMember('Vladilen')
  console.log(logWithLastName('Minin'))
  console.log(logWithLastName('Kuznezov'))






//еще пример
  function sayHi(name) {
    var phrase = "Привет, " + name;
    alert( phrase );
  }
  
  sayHi('Вася');






//6 рекурсия 

/*Рекурсия с цифрами
Все рекурсивные функции нуждаются в базовом случае, чтобы они завершились. Однако просто добавление базового футляра к нашей функции не препятствует 
его бесконечному выполнению. Функция должна иметь шаг, чтобы приблизить нас к основному случаю. Последний - это рекурсивный шаг. На рекурсивном шаге проблема
 сводится к меньшей версии проблемы.

Предположим, что у вас есть функция, которая будет суммировать числа от 1 до n. Например, если n = 4, сумма будет равна 1 + 2 + 3 + 4.

Сначала мы определяем базовый случай. Обнаружение базового случая можно также рассматривать как поиск случая, когда проблема может быть решена без рекурсии. 
В этом случае, когда n равно нулю. 0 не имеет частей, поэтому наша рекурсия может остановиться, когда мы достигнем 0.

На каждом шаге вы будете вычитать один из текущего числа. Что такое рекурсивный случай? Рекурсивный случай - это сумма функций, называемая сокращенным числом.*/


function sum(num){
     if (num === 0) {
         return 0;
     } else {
         return num + sum(--num)
     }
 }
  
 sum(4);     //10
/*Это то, что происходит на каждом шагу:

Переходим к сумме (4).
Является ли 4 равным 0? Нет. Положите сумму (4) на удержание и перейдите к сумме (3).
Является ли 3 равным 0? Нет. Положите сумму (3) на удержание и перейдите к сумме (2).
Является 2 равным 0? Нет. Положите сумму (2) на удержание и перейдите к сумме (1).
Является ли 1 равным 0? Нет. Положите сумму (1) на удержание и перейдите к сумме (0).
0 равно 0? Да. Оцените сумму (0).
Поднимите сумму (1).
Поднимите сумму (2).
Поднимите сумму (3).
Поднимите сумму (4).
Это еще один способ увидеть, как функция обрабатывает каждый вызов:*/

sum(4)
 4 + sum(3)
 4 + ( 3 + sum(2) )
 4 + ( 3 + ( 2 + sum(1) ))
 4 + ( 3 + ( 2 + ( 1 + sum(0) )))
 4 + ( 3 + ( 2 + ( 1 + 0 ) ))
 4 + ( 3 + ( 2 + 1 ) )
 4 + ( 3 +  3 ) 
 4 + 6 
 10

/*Аргумент должен измениться в рекурсивном случае и приблизит вас к основному случаю. 
Этот аргумент должен быть протестирован в базовом случае. В предыдущем примере, поскольку мы вычитаем один из рекурсивного случая,
 мы проверяем, равен ли аргумент нулю в нашем базовом случае.*/