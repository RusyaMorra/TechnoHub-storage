//3 Операторы 







/*Типы операторов
Операторы в JavaScript принято делить по количеству принимаемых операндов:

Унарные операторы
Бинарные операторы
Тернарные операторы
Все операторы различают по следующим видам:

Операторы присваивания
Операторы сравнения
Арифметические операторы
Логические побитовые операторы
Логические операторы
Реляционные операторы
Оператор new
Оператор вызова
Операторы доступа
Оператор запятая*/





_______________

   /*---Унарные операторы - Унарным называют оператор, принимающий всего один операнд либо с левой либо с правой стороны.

   operator operand - например:*/ ++i,/* где ++ - оператор, а i - операнд, или
   
   operand operator - например:*/ i++,/* где i - операнд, а ++ - оператор*/
  
  
  
   // еще есть словесные унарные оператора в JavaScript.

  /*---delete - Удаляет объект, свойство объекта, элемент массива под определенным индексом, а также неявно объявленные переменные (без ключевого слова var). 
  В случае успешного удаления какого-либо элемента, то обращаться к нему уже будет нельзя, т.к. его не существует. Возвращает true если удаление возможно 
  и false если невозможно.*/
  

    x = 45; //неявно объявляем переменную - x 
    var y = 54; //явно объявляем переменную - y
    myObj = new Number(); //создали объект - myObj
    myObj.type = "integer"; //определили свойство - type для объекта - myObj
    var flowers = ["Camelia", "Orchid", "Daisy", "Rose"]; //создали массив - flowers
 
   delete x;          //удалит неявную переменную x, возвратит true
   delete y;          //удалять явные переменные нельзя, возвратит false 
   delete myObj.type; //удалит свойство объекта, возвратит true
   delete myObj;      //удалит объект и все его свойства, возвратит true
   delete flowers[3]; //удалит четвертый элемент массива, возвратит true 
   delete Math.PI;    /*удалять системные элементы нельзя, возвратит false
  
  
  */

  /*---typeof - Возвращает строку со значением типа данных операнда. Операндом могут быть переменные, литералы, объекты, свойства объектов и некоторые ключевые слова.*/
  
  //Определение типов данных объявленных переменных
  
  var myFunc = new Function(4 + 5);
  var name = "Jack";
  var weight = 75;
  var today = new Date();
 
    typeof myFunc; //возвратит "function"
    typeof name;   //возвратит "string"
    typeof weight; //возвратит "number"
    typeof today;  //возвратит "object"
    typeof dontExist; //возвратит "undefined"
 
    //Определение типов данных литералов
    typeof 45;     //возвратит "number"
    typeof "Jack"; //возвратит "string"
 
    //Определения типа данных null и true
    typeof null;   //возвратит "object"
    typeof true;   //возвратит "boolean"
 
    //Определение типов данных свойств объектов
    typeof Math.PI //возвратит "number"
    typeof document.domain /*возвратит "string"
  
  */
  
    /*--- void - Оператор void, в основном приводит все значения какого-либо выражения к значению undefined. Вы можете передать в качестве операнда выражение или значение, 
  которые будут  преобразованы в undefined. Применение данный оператор находит при использования протокола "javascript: (URI)". После нажатия по ссылке срабатывает 
  код javascript, который не возвращает какое-либо значение, кроме undefined.*/


   void 45; //45 -> undefined
   void ("Hello world".toUppeerCase()); //"HELLO WORLD" -> undefined 
 
   <a href="javascript: void (alert('Hello world'));">
   Нажмите сюда и появится сообщение
   </a>
  
  /**/

_______________________________________________________________________________________________________








   /*--- Бинарные операторы - Бинарным называют оператор, который принимает два операнда, по одному с каждой стороны.

   operand operator operand - например: 2 + 1, где 2 и 1 - операнды, а + - оператор
Данный тип операторов наиболее распространенный. К бинарным операторам относятся: арифметические, логические, операторы сравнения и другие. Все они будут рассмотрены далее.*/

   

_________________________________________________________________________________________________________








/*---Унарные операторы - Тернарный оператор принимает три операнда. В JavaScript существует всего один тернарный
    оператор - оператор условия (? :). Данный оператор является составным и включает в себя знаки ? и :.
    Первым операндом является логическое выражение и если оно истинно, то возвращается второй операнд, если ложно, то возвращается третий операнд.*/

    var a = 5, b = 3, max;
    //Определим максимальное значение
    max = (a>b) ? a : b; //логическое_выражение ? истина : ложь
    //Result: max = 5
    
    //В качестве второго и третьего операнда могут выступать некоторые операции, например, присвоение переменных или выполнение функций. 

    var price = 45,
    discount;
(price > 30) ? discount = "Скидка 5%" : discount = 0;
    
   /* */





__________________________________________________________________________________________________________


  /*---Операторы присваивания - Данные операторы присваивают левому операнду значение правого операнда.*/


//оператор  значение

//x = y  	x = y       //	Присвоение значения

var x = 4, y = 5;
x = y; 



//x += y	x = x + y	   //Присвоение со сложением

var x = 4, y = 5;
x += y; //x = x + y
//result: x = 9




//x -= y	x = x - y    //	Присвоение с вычитанием

var x = 4, y = 5;
x -= y; //x = x - y
//Результат: x = -1

//x *= y	x = x * y	    //Присвоение с умножением
 

var x = 4, y = 5;
x *= y; //x = x * y 
//Результат: x = 20





//x /= y	x = x / y	   //Присвоение с делением

var x = 4, y = 5;
x /= y; //x = x / y
//Результат: x = 0.8


//x %= y	x = x % y	   //Присвоение с вычиcлением остатка




var x = 21, y = 5;
x %= y; //x = x % y
//Результат: x = 1





//x **= y	x = x ** y	//Присвоение с возведением в степень
                    //Данный оператор носит экспериментальный характер и является частью стандарта ECMAScript 2016 и не работает в браузерах, которые не поддерживают данный стандарт.


var x = 4, y = 5;
x **= y; //x = x ** y 
//Результат: x = 1024)





//x <<= y	x = x << y   //	Присвоение с побитовым сдвигом влево

var x = 4; //(00000100)
var y = 2; 
x <<= y; //x = x << y
//Результат: x = 16; (00010000) 






//x >>= y	x = x >> y   //	Присвоение с побитовым сдвигом вправо


var x = 4; //(00000100)
var y = 2; 
x >>= y; //x = x >> y
//Результат: x = 1; (00000001) )







//x >>>= y	x = x >>> y	   //Присвоение c побитовым сдвигом вправо с заполнением битов слева нулями

var x = -4; //(-00000000000000000000000000000100)
var y = 2; 
x >>>= y; //x = x >>> y
//Результат: x = 1073741823; (00111111111111111111111111111110))






//x &= y	x = x & y	   // Присвоение с побитовым И (AND)

var x, y;
x = 45; //00101101
y = 54; //00110110
x &= y; //x = x & y
//result: x = 36 //00100100)





//x ^= y	x = x ^ y	    //Присвоение с побитовым исключающем ИЛИ (XOR)

var x, y;
x = 45; //00101101
y = 54; //00110110
x ^= y; //x = x ^ y
//result: x = 27 //00011011





//x |= y	x = x | y   //	Присвоение с побитовым ИЛИ (OR)

var x, y;
x = 45; //00101101
y = 54; //00110110
x |= y; //x = x | y
//result: x = 63 //00111111)


/**/
__________________________________________________________________________________________________________

/* --- Операторы сравнения - Операторы сравнения сравнивают свои правый и левый операнд между собой и, на основе истинности этого сравнения, возвращают значение
 логического типа - true или false. В качестве операндов могут выступать: числовые, строковые, логические или объектные значения. */






//оператор  название


//x == y	    Равенство             //	Возвращает true, если операнды не строго равны. Не делает проверки на равенство типов данных и при сравнении одинаковых значений для разных типов данных, возвращает - true.

var x = 4, y = 5, z1, z2;
z1 = x == '4'; //Числовое значение переменной x - равно строке '4'
z2 = x == y; 
//result: z1 = true, z2 = false






//x != y   	Неравенство             //	Возвращает true, если операнды не строго не равны. Не делает проверки на неравенство типов данных и при сравнении разных значений для разных типов данных, возвращает - true.




var x = 4, y = 5, z1, z2;
z1 = x != y; 
z2 = x != '4'; 
//result: z1 = true, z2 = false





//x === y	   Строгое равенство	      // Возвращает true, если операнды строго равны. Делает проверку на равенство типов данных и при сравнении одинаковых значений для одинаковых типов данных, возвращает - true.


var x = 4, z1, z2;
z1 = x === 4;   //Вернет true т.к. значения и типы данных совпадают (число равно числу)
z2 = x === '4'; //Вернет false т.к. несмотря на равенство значений,
				//типы данных не совпадают (число не равно строке) 
//result: z1 = true, z2 = false




//x !== y    	Строгое неравенство	      //Возвращает true, если операнды строго не равны. Делает проверку на неравенство типов данных и при сравнении разных значений для одинаковых типов данных, возвращает - false.





var x = 4, z1, z2;
z1 = x !== 4;   //Вернет false т.к. значения и типы данных совпадают (число равно числу)
z2 = x !== '4'; //Вернет true т.к. несмотря на равенство значений,
				//типы данных не совпадают (число не равно строке)
//result: z1 = false, z2 = true




//x > y	     Больше чем	       //Возвращает      true, если левый операнд больше правого.


var x = 4, y = 5, z;
z = y > x; 
//result: z = true





//x >= y	   Больше чем или равно         //	Возвращает true, если левый операнд больше правого либо равен ему.


var x = 4, y = 5, z1, z2;
z1 = y >= x; 
z2 = x >= 4;
//result: z1 = true, z2 = true




//x < y	  Меньше чем                    //	Возвращает true, если левый операнд меньше правого.



var x = 4, y = 5, z;
z = x < y;  
//result: z = true




//x <= y	Меньше чем или равно            //	Возвращает true, если левый операнд меньше правого либо равен ему.*/




var x = 4, y = 5, z1, z2;
z1 = x <= y; 
z2 = x <= 4; 
//result: z1 = true, z2 = true







_____________________________________________________________________________________________________________


/* --- Арифметические операторы - Арифметические операторы принимают в качестве своих операндов числовые значения (в виде литералов или переменных) 
и позволяют проводить над ними арифметические действия.*/



//оператор  название


//x + y	Сложение	          //Возвращает сумму двух операндов.

var x = 4, y = 5, z;
z = x + y;
//result: z = 9

//x - y	Вычитание             //Возвращает разность двух операндов.


var x = 4, y = 5, z;
z = x - y;
//result: z = -1


//x * y	Умножение       //	Возвращает произведение двух операндов.

var x = 4, y = 5, z;
z = x * y;
//result: z = 20


//x / y	Деление	             //Возвращает частное двух операндов.

var x = 4, y = 5, z;
z = x / y;
//result: z = 0.8

//x % y	Деление с остатком	  //Возвращает остаток от частного двух операндов.

var x = 4, y = 5, z;
z = y % x; 
//result: z = 1


/*

Помимо стандартных арифметических операций, JavaScript также имеет несколько дополнительных операторов, которые представлены далее в таблице.

x++	Инкремент	Унарный оператор. Добавляет единицу к своему операнду и возвращает его значение.
В зависимости от положения инкремента возвращаемое значение может изменяться. При преинкременте (++x) значение операнда возвращается после приращения на единицу, а при постинкременте (x++) значение операнда возвращается перед приращением на единицу.
x--	Декремент	Унарный оператор. Вычитает единицу из своего операнда и возвращает его значение.
В зависимости от положения декремента возвращаемое значение может изменяться. При предекременте (--x) значение операнда возвращается после уменьшения на единицу, а при постдекременте (x--) значение операнда возвращается перед уменьшением на единицу.
-x	Отрицание	Унарный оператор. Возвращает отрицательное значение операнда.
+x	Преобразование к числовому типу	Унарный оператор. Преобразование операнда к числовому типу данных, если он не является таковым.
x ** y	Возведение в степень	Возводит левый операнд в степень значения правого операнда.
Данный оператор носит эксперементальный характер и нерекомендуется для использования в рабочих проектах.

*/

_____________________________________________________________________________________________________________________________________________________________________________________

/*Побитовые операторы

Побитовые операторы представляют свои операнды в двоичном виде (нули и единицы) и выполняют соответствующие операции по каждому биту отдельно (всего 32 бита), однако 
возвращают результат в десятичной системе счисления.*/

//В следующей таблице представлены все побитовые операторы.





//  x & y	Побитовое И (AND)	                         //Возвращает единицу, если определнный бит первого и второго операнда - единица

var x=4, //0100
	y=5, //0101
	z;
z = x & y;
//result: z = 4 (0100








//  x | y	Побитовое ИЛИ (OR)                        //Возвращает единицу, если определнный бит первого и второго операнда - не нуль

var x=4, //0100
	y=5, //0101
	z;
z = x | y;
//result: z = 5 (0101)









//  x ^ y	Побитовое исключающее ИЛИ (XOR)          //Возвращает единицу, если только один из определенных битов первого и второго операнда - единица

var x=4, //0100
	y=5, //0101
	z;
z = x ^ y;
//result: z = 1 (0001)









// ~x	Побитовое НЕ (NOT)	                        //Изменяет биты на противоположные (где был нуль, там будет единица и наоборот).


var x=4, //00000000..00000100 (32 бита)
	z;
z = ~x;
//result: z = -5 (11111111..11111011)








//  x << y	Побитовый сдвиг влево	               //Сдвигает каждый бит влево, дополняя новый бит с права нулем. Левый операнд тот, чьи биты будут сдвигаться, а правый определяет количество битов сдвига.

var x=4, //00000100
	y=2, 
	z;
z = x << y;
//result: z = 16 (00010000)


//  x >> y	Побитовый сдвиг вправо	            //Сдвигает каждый бит вправо. Левый операнд тот, чьи биты будут сдвигаться, а правый определяет количество битов сдвига.

var x=-8, //11111111..11110111 (32 бита)
	y=2, 
	z;
z = x >> y;
//result: z = -2 (11111111..11111101)




//  x >>> y	Побитовый сдвиг вправо	           //Сдвигает каждый бит вправо, дополняя новый бит с лево нулем. Левый операнд тот, чьи биты будут сдвигаться, а правый определяет количество битов сдвига.

var x=-8, //11111111..11110111 (32 бита)
	y=2, 
	z;
z = x >>> y;
//result: z = 1073741822 (00111111..11111101)






____________________________________________________________________________________________________________________________________________________________________________


/*Логические операторы 


Логические операторы работают с операндами, которые могут принимать только булевые значения (true или false). 
В результате той или иной логической операции над операндами возвращается, как правило, один из этих операндов. 
В качестве операндов могут выступать абсолютно любые значения - числовые, строковые, объектные и другие, однако каждое значение, 
какого бы типа оно не было - будет преобразовано в булевый тип, однако возвращаемое значение одного из операнда будет неизменным (кроме операнда оператора НЕ ! ). 
Логические операторы наиболее часто используются в условных конструкциях.

Далее рассмотрим три единственных логических оператора в JavaScritp:*/



// x && y	Логическое И (AND)	- возвращается второй операнд, если первый операнд - true;
                              //- возвращается первый операнд, если он - false.
                              var x = 4, y = 5, z1, z2, z3;
                              z1 = x && y;  //Первый операнд - true, возвращается второй операнд
                              z2 = 0 && y;  //Первый операнд - false, возвращается он же 
                              z3 = x && ''; //Первый операнд - true, возвращается второй операнд, даже если он - false
                              //result: z1 = y, z2 = 0, z3 = ''




// x || y	Логическое ИЛИ (OR)	- возвращается первый операнд, если оба операнда - true;
                             //- если любой из операндов - true, то возвращается он же;
                             //- если оба оператора - false, то возвращается второй операндp.
                             var x = 4, y = 5, z1, z2, z3, z4;
                             z1 = x || y;  //Оба операнда - true, возвращается первый операнд
                             z2 = 0 || y;  //Первый операнд - false, возвращается второй операнд
                             z3 = 0 || ''; //Оба операнда - false, возвращается второй операнд
                             z4 = x || ''; //Первый операнд - true, возвращается он же
                             //result: z1 = x, z2 = y, z3 = '', z4 = x


// !x    Логическое НЕ (NOT)          Преобразует любое значение к булевому типу и меняет его на противоположный.   
                                        var x=4, //true
                                        y=0, //false
                                        z1, z2;
                                        z1 = !x;
                                        z2 = !y;
                                        z3 = !!x; //Двойное отрицание (перевод значения к булевому типу)
                                        //result: z = false, z2 = true, z3 = true                  
                                        
                                        
_______________________________________________________________________________________________________________________________________________________________________________

/*Реляционные операторы   

Реляционные операторы, сопоставляют свои операнды между собой и возвращают Булево значение, на основании истинности их сопоставления.*/







//значение                     //формула


//in            //	objectPropertyName in objectName или arrayIndexNumber in arrayName //	         Возвращает - true, если свойство объекта или индекс массива (левый операнд) принадлежит определенному объекту или массиву (правый операнд).



// Массивы
var flowers = ['orchid', 'daisy', 'violet', 'sunflower'];
0 in flowers;        // Вернет true
3 in flowers;        // Вернет true
6 in flowers;        // Вернет false т.к. элемента с индексом 6 - нет
'daisy' in flowers;  // Вернет false т.к. должен быть указан индекс или свойство,
                   	 // а не само значение.
'length' in flowers; // Вернет true т.к. lenght - является свойством объекта Array
 
// Встроенные объекты языка JavaScript
'PI' in Math;          // Вернет true т.к. PI - является свойством объекта Math
var myString = new String('Hey there!');
'length' in myString;  // Вернет true т.к. lenght - является свойством объекта String
 
// Пользовательские объекты
var myDog = { breed: 'German sheperd', gender: 'male', age: 2 };
'breed' in myDog;  // Вернет true
'age' in myDog;    // Вернет true
'name' in myDog;   // Вернет false







//instanceof        //	 objectName instanceof objectType               //	Возвращает - true, если объект является экземляром определенного объектного типа.



var birthDay = new Date(1994, 06, 19), z;
z = birthDay instanceof Date;
//result: z = true


__________________________________________________________________________________________________________________________________________________________________________________




/*Оператор New

Оператор new позволяет создавать новый экземпляр определенного объекта, который имеет конструктор.*/

//new constructor(arg1, arg2,  //... , argn)

/*Ниже рассмотрим краткий пример использования оператора new.*/


//Ниже рассмотрим краткий пример использования оператора new.

/* почему то выдает ошибку, пример снизу придеться закомментировать

// Создадим конструктор для объекта типа Employer (сотрудник)
function Employer(firstName, lastName, position){
  this.firstName = firstName; // Имя сотрудника
  this.lastName = lastName;   // Фамилия сотрудника
  this.position = position;   // Должность сотрудника
};
 
 Создадим несколько экземпляров объекта типа Employer


var  firedEmployer = new Employer("Nathan", "Drake", "archaeologist");
var  hiredEmployer = new Employer("Kate", "Walker", "lawyer");*/

______________________________________________________________________________________________________________________________________________________________________________



/*Оператор вызова
Оператор вызова - ( ) принимает имя функции, которую нужно вызвать, в качестве своего единственного операнда. Если при создании функции, ей были добавлены параметры,
то при вызове функции оператор может передавать эти параметры на обработку в тело функции, нужно лишь перечислить их в нужном порядке внутри самого оператора.





Пример использования оператора вызова, представлен ниже.*/

// Объявим функцию c параметром
var someFun = function (y){
  var x = 4, z;
  if(y == undefined) y = 0;
  return z = x + y;
};
 
someFun();  //Вызов функции без параметра: z = 4
someFun(5); //Вызов функции c параметром: z = 9



//Часто оператор вызова используют при создании самовызывающихся функций, для этого нужно поместить оператор ( ) в конец тела функции, 
//сразу после закрывающейся фигурной скобки, как на примере ниже.

var someFun = function (){
  // Тело функции
}(); // Вызов функции


____________________________________________________________________________________________________________________________________________________________________________
/*
Операторы доступа-



К операторам доступа относятся - . (точка) и [ ]. С помощью данных операторов можно получать значение свойств объектов и элементов массивов.

Для оператора точка левым операндом является имя объекта, а правым - имя свойства. Оператор точка применим только к объектам, в то время как оператор [ ] может применяться как для получения свойства объекта, так и для получения значения элемента массива.

objectName.objectProperty

objectName["objectProperty"]

arrayName[elementIndex]

Ниже дан небольшой пример использования операторов доступа.*/


// Создадим объект и массив
var obj = {
  prop1: "value",
  prop2: "41",
}
 
var arr = [1, 2, 3, 4, 5];
 
// Получим значения свойств объекта - obj,
// а также значение элементов массива - arr
var z1, z2, z3;
z1 = obj.prop1;
z2 = obj["prop2"];
z3 = arr[3];
//Result: z1 = "value", z2 = 45, z3 = 4



_______________________________________________________________________________________________________________________________________________________________________________



/*Оператор "Запятая"
Оператор запятая - , последовательно возвращает значение своих операндов, сначала возвращается значение левого операнда, а затем правого.

Наиболее часто оператор запятая используется для выполнения нескольких выражений там, где интерпретатор ожидает увидеть только одно выражение. 
В большинстве случаях оператор запятая можно встретить в цикле for, где она позволяет обновлять значения сразу нескольких переменных.*/

for (var i = 0, j = 9; i <= j; i++, j--)
  console.log('matrix[' + i + '][' + j + ']= ' + a[i][j])

  /*Также оператор запятая будет полезна внутри тернарного оператора условия. Так, использую оператор запятая, можно указать нескольких выражений,
   которые выполнятся внутри второго или третьего операнда тернарного оператора, отсюда Вам не придется лишний раз прибегать к созданию блоков условий if else.*/
   userAccount ? (login(), loginedUsers++) : (newUsers++, registrate());

   /*Не следует путать оператор запятая с запятой в перечислениях 
   (элементы массива, последовательное объявление переменных или свойств) т.к. в этом случае запятая будет играть роль разделителя, а не оператора.



   В следующем примере запятая играет роль разделителя.*/
   

// Перечисление элементов массива
var arr = [1, 2, 3, 4];
 
// Перечисление свойств объекта
var obj = {
  prop1: 1,
  prop2: 2,
  fun: function() {return this.prop1 + this.prop2}
}
 
// Перечисление объявлений переменных
var a = 1, b = 2, c = 3;
 
// Перечисление параметров функции
someFunctionName(4, 7);



_________________________________________________________________________________________________________________________________________________________________________________

/*Приоритет оператора определяет его очередь в исполнении среди других операторов. Так, например, в выражении 1 + 2 * 3, 
наибольшим приоритетом обладает оператор произведения - *, и, не смотря на то, что чтение выражения идет слева на право, 
сначала будет выполнено произведение операндов 2 и 3, а затем сумма 1 и 6.

В таблице ниже, представлен список приоритета операторов.

1	Доступ к членам объекта/массива	. [ ]
2	Вызов / Создание экзепляра класса	( ) new
3	Отрицание / Инкремент	! ~ - + ++ -- typeof void delete
4	Умножение / Деление	* / %
5	Сложение / Вычитание	+ -
6	Побитовый сдвиг	<< >> >>>
7	Сравнение / Соотношение	< <= > >= in instanceof
8	Равенство	== != === !==
9	Побитовое И	&
10	Побитовое исключающее ИЛИ	^
11	Побитовое ИЛИ	|
12	Логическое И	&&
13	Логическое ИЛИ	||
14	Оператор условия	?:
15	Присваивание	= += -= *= /= %= <<= >>= >>>= &= ^= |=
16	Запятая	,


*/